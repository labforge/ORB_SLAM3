// Generated by gencpp from file BagFromImages/Point2f.msg
// DO NOT EDIT!


#ifndef BAGFROMIMAGES_MESSAGE_POINT2F_H
#define BAGFROMIMAGES_MESSAGE_POINT2F_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace BagFromImages
{
template <class ContainerAllocator>
struct Point2f_
{
  typedef Point2f_<ContainerAllocator> Type;

  Point2f_()
    : x(0.0)
    , y(0.0)  {
    }
  Point2f_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::BagFromImages::Point2f_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BagFromImages::Point2f_<ContainerAllocator> const> ConstPtr;

}; // struct Point2f_

typedef ::BagFromImages::Point2f_<std::allocator<void> > Point2f;

typedef boost::shared_ptr< ::BagFromImages::Point2f > Point2fPtr;
typedef boost::shared_ptr< ::BagFromImages::Point2f const> Point2fConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BagFromImages::Point2f_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BagFromImages::Point2f_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::BagFromImages::Point2f_<ContainerAllocator1> & lhs, const ::BagFromImages::Point2f_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::BagFromImages::Point2f_<ContainerAllocator1> & lhs, const ::BagFromImages::Point2f_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace BagFromImages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::BagFromImages::Point2f_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BagFromImages::Point2f_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BagFromImages::Point2f_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BagFromImages::Point2f_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BagFromImages::Point2f_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BagFromImages::Point2f_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BagFromImages::Point2f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff8d7d66dd3e4b731ef14a45d38888b6";
  }

  static const char* value(const ::BagFromImages::Point2f_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff8d7d66dd3e4b73ULL;
  static const uint64_t static_value2 = 0x1ef14a45d38888b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::BagFromImages::Point2f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BagFromImages/Point2f";
  }

  static const char* value(const ::BagFromImages::Point2f_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BagFromImages::Point2f_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#class cv::Point2f\n"
"#{\n"
"#    float x;\n"
"#    float y;\n"
"#}\n"
"\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::BagFromImages::Point2f_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BagFromImages::Point2f_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point2f_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BagFromImages::Point2f_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BagFromImages::Point2f_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAGFROMIMAGES_MESSAGE_POINT2F_H
