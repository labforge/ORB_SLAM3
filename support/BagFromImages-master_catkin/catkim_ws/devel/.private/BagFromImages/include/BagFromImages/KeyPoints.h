// Generated by gencpp from file BagFromImages/KeyPoints.msg
// DO NOT EDIT!


#ifndef BAGFROMIMAGES_MESSAGE_KEYPOINTS_H
#define BAGFROMIMAGES_MESSAGE_KEYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <BagFromImages/KeyPoint.h>

namespace BagFromImages
{
template <class ContainerAllocator>
struct KeyPoints_
{
  typedef KeyPoints_<ContainerAllocator> Type;

  KeyPoints_()
    : header()
    , keypoints()  {
    }
  KeyPoints_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , keypoints(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::BagFromImages::KeyPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::BagFromImages::KeyPoint_<ContainerAllocator> >::other >  _keypoints_type;
  _keypoints_type keypoints;





  typedef boost::shared_ptr< ::BagFromImages::KeyPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::BagFromImages::KeyPoints_<ContainerAllocator> const> ConstPtr;

}; // struct KeyPoints_

typedef ::BagFromImages::KeyPoints_<std::allocator<void> > KeyPoints;

typedef boost::shared_ptr< ::BagFromImages::KeyPoints > KeyPointsPtr;
typedef boost::shared_ptr< ::BagFromImages::KeyPoints const> KeyPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::BagFromImages::KeyPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::BagFromImages::KeyPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::BagFromImages::KeyPoints_<ContainerAllocator1> & lhs, const ::BagFromImages::KeyPoints_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.keypoints == rhs.keypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::BagFromImages::KeyPoints_<ContainerAllocator1> & lhs, const ::BagFromImages::KeyPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace BagFromImages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::BagFromImages::KeyPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::BagFromImages::KeyPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BagFromImages::KeyPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::BagFromImages::KeyPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BagFromImages::KeyPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::BagFromImages::KeyPoints_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::BagFromImages::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ada03370f65713b6c35c9e1949b83815";
  }

  static const char* value(const ::BagFromImages::KeyPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xada03370f65713b6ULL;
  static const uint64_t static_value2 = 0xc35c9e1949b83815ULL;
};

template<class ContainerAllocator>
struct DataType< ::BagFromImages::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BagFromImages/KeyPoints";
  }

  static const char* value(const ::BagFromImages::KeyPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::BagFromImages::KeyPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"KeyPoint[] keypoints\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: BagFromImages/KeyPoint\n"
"#class cv::KeyPoint\n"
"#{\n"
"#    Point2f pt;\n"
"#    float size;\n"
"#    float angle;\n"
"#    float response;\n"
"#    int octave;\n"
"#    int class_id;\n"
"#}\n"
"\n"
"Point2f pt\n"
"float32 size\n"
"float32 angle\n"
"float32 response\n"
"int32 octave\n"
"int32 class_id\n"
"================================================================================\n"
"MSG: BagFromImages/Point2f\n"
"#class cv::Point2f\n"
"#{\n"
"#    float x;\n"
"#    float y;\n"
"#}\n"
"\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::BagFromImages::KeyPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::BagFromImages::KeyPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.keypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::BagFromImages::KeyPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::BagFromImages::KeyPoints_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "keypoints[]" << std::endl;
    for (size_t i = 0; i < v.keypoints.size(); ++i)
    {
      s << indent << "  keypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::BagFromImages::KeyPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAGFROMIMAGES_MESSAGE_KEYPOINTS_H
